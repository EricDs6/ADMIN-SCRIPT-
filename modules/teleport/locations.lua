--[[
    M√≥dulo de Teleporte
    Parte do Admin Script Modular v2.0
    
    Funcionalidades:
    - Teleportar para jogadores
    - Teleportar para locais predefinidos
    - Salvar localiza√ß√µes personalizadas
    - Voltar ao √∫ltimo local
]]

-- Verificar se AdminScript est√° dispon√≠vel
local Admin = _G.AdminScript
if not Admin then
    warn("‚ùå AdminScript n√£o inicializado! M√≥dulo de teleporte n√£o pode ser carregado.")
    return
end

local Services = Admin.Services
local Player = Admin.Player

-- Estado do m√≥dulo
local TeleportModule = {
    lastPosition = nil,
    savedLocations = {}
}

-- Fun√ß√£o para teleportar para uma posi√ß√£o
local function teleportTo(position)
    -- Verificar se a posi√ß√£o √© v√°lida
    if not position or typeof(position) ~= "Vector3" then
        warn("‚ùå Posi√ß√£o inv√°lida para teleporte!")
        return false
    end
    
    -- Verificar personagem
    local character = Player.Character
    if not character then
        warn("‚ùå Personagem n√£o encontrado!")
        return false
    end
    
    local hrp = character:FindFirstChild("HumanoidRootPart")
    if not hrp then
        warn("‚ùå HumanoidRootPart n√£o encontrado!")
        return false
    end
    
    -- Guardar posi√ß√£o atual antes de teleportar
    TeleportModule.lastPosition = hrp.Position
    
    -- Teleportar
    hrp.CFrame = CFrame.new(position)
    
    -- Notificar
    if Admin.Config.debugMode then
        print("üöÄ Teleportado para: " .. tostring(position))
    end
    
    return true
end

-- Fun√ß√£o para teleportar para um jogador
local function teleportToPlayer(playerName)
    -- Verificar se o nome √© v√°lido
    if not playerName or type(playerName) ~= "string" then
        warn("‚ùå Nome de jogador inv√°lido!")
        return false
    end
    
    -- Verificar personagem do usu√°rio
    local character = Player.Character
    if not character then
        warn("‚ùå Personagem n√£o encontrado!")
        return false
    end
    
    local hrp = character:FindFirstChild("HumanoidRootPart")
    if not hrp then
        warn("‚ùå HumanoidRootPart n√£o encontrado!")
        return false
    end
    
    -- Procurar o jogador alvo
    local targetPlayer = nil
    
    -- Verificar correspond√™ncia exata primeiro
    for _, plr in pairs(Services.Players:GetPlayers()) do
        if plr.Name:lower() == playerName:lower() then
            targetPlayer = plr
            break
        end
    end
    
    -- Se n√£o encontrou correspond√™ncia exata, procurar por correspond√™ncia parcial
    if not targetPlayer then
        for _, plr in pairs(Services.Players:GetPlayers()) do
            if plr.Name:lower():find(playerName:lower(), 1, true) then
                targetPlayer = plr
                break
            end
        end
    end
    
    -- Verificar se encontrou o jogador
    if not targetPlayer then
        warn("‚ùå Jogador '" .. playerName .. "' n√£o encontrado!")
        return false
    end
    
    -- Verificar se o jogador alvo tem personagem
    local targetCharacter = targetPlayer.Character
    if not targetCharacter then
        warn("‚ùå Personagem do jogador alvo n√£o encontrado!")
        return false
    end
    
    local targetHRP = targetCharacter:FindFirstChild("HumanoidRootPart")
    if not targetHRP then
        warn("‚ùå HumanoidRootPart do jogador alvo n√£o encontrado!")
        return false
    end
    
    -- Guardar posi√ß√£o atual antes de teleportar
    TeleportModule.lastPosition = hrp.Position
    
    -- Teleportar
    hrp.CFrame = targetHRP.CFrame * CFrame.new(0, 0, 3) -- 3 studs atr√°s do alvo
    
    -- Notificar
    if Admin.Config.debugMode then
        print("üöÄ Teleportado para jogador: " .. targetPlayer.Name)
    end
    
    return true
end

-- Fun√ß√£o para voltar ao √∫ltimo local
local function goBack()
    -- Verificar se h√° posi√ß√£o anterior
    if not TeleportModule.lastPosition then
        warn("‚ùå Nenhuma posi√ß√£o anterior dispon√≠vel!")
        return false
    end
    
    -- Teleportar para a √∫ltima posi√ß√£o
    local success = teleportTo(TeleportModule.lastPosition)
    
    -- Se o teleporte foi bem-sucedido, limpar a √∫ltima posi√ß√£o
    if success then
        local temp = TeleportModule.lastPosition
        TeleportModule.lastPosition = nil
        
        -- Notificar
        if Admin.Config.debugMode then
            print("üîÑ Retornado √† posi√ß√£o anterior: " .. tostring(temp))
        end
    end
    
    return success
end

-- Fun√ß√£o para salvar localiza√ß√£o atual
local function saveLocation(name)
    -- Verificar se o nome √© v√°lido
    if not name or type(name) ~= "string" then
        warn("‚ùå Nome inv√°lido para salvar localiza√ß√£o!")
        return false
    end
    
    -- Verificar personagem
    local character = Player.Character
    if not character then
        warn("‚ùå Personagem n√£o encontrado!")
        return false
    end
    
    local hrp = character:FindFirstChild("HumanoidRootPart")
    if not hrp then
        warn("‚ùå HumanoidRootPart n√£o encontrado!")
        return false
    end
    
    -- Salvar localiza√ß√£o
    TeleportModule.savedLocations[name] = {
        position = hrp.Position,
        saveTime = tick()
    }
    
    -- Notificar
    if Admin.Config.debugMode then
        print("üíæ Localiza√ß√£o '" .. name .. "' salva: " .. tostring(hrp.Position))
    end
    
    return true
end

-- Fun√ß√£o para teleportar para uma localiza√ß√£o salva
local function teleportToSaved(name)
    -- Verificar se o nome √© v√°lido
    if not name or type(name) ~= "string" then
        warn("‚ùå Nome inv√°lido para localiza√ß√£o salva!")
        return false
    end
    
    -- Verificar se a localiza√ß√£o existe
    if not TeleportModule.savedLocations[name] then
        warn("‚ùå Localiza√ß√£o '" .. name .. "' n√£o encontrada!")
        return false
    end
    
    -- Obter posi√ß√£o salva
    local savedPosition = TeleportModule.savedLocations[name].position
    
    -- Teleportar para a posi√ß√£o salva
    local success = teleportTo(savedPosition)
    
    -- Notificar
    if success and Admin.Config.debugMode then
        print("üöÄ Teleportado para localiza√ß√£o salva: " .. name)
    end
    
    return success
end

-- Fun√ß√£o para listar todas as localiza√ß√µes salvas
local function listSavedLocations()
    local locations = {}
    
    for name, data in pairs(TeleportModule.savedLocations) do
        table.insert(locations, {
            name = name,
            position = data.position,
            saveTime = data.saveTime
        })
    end
    
    return locations
end

-- Fun√ß√£o para remover uma localiza√ß√£o salva
local function removeLocation(name)
    -- Verificar se o nome √© v√°lido
    if not name or type(name) ~= "string" then
        warn("‚ùå Nome inv√°lido para remover localiza√ß√£o!")
        return false
    end
    
    -- Verificar se a localiza√ß√£o existe
    if not TeleportModule.savedLocations[name] then
        warn("‚ùå Localiza√ß√£o '" .. name .. "' n√£o encontrada!")
        return false
    end
    
    -- Remover localiza√ß√£o
    TeleportModule.savedLocations[name] = nil
    
    -- Notificar
    if Admin.Config.debugMode then
        print("üóëÔ∏è Localiza√ß√£o '" .. name .. "' removida")
    end
    
    return true
end

-- Locais pr√©-definidos para jogos populares
local predefinedLocations = {
    -- Pris√£o
    ["Prison"] = {
        ["Celas"] = Vector3.new(917, 99.9, 2453),
        ["Refeit√≥rio"] = Vector3.new(918, 99.9, 2325),
        ["P√°tio"] = Vector3.new(779, 97.9, 2477),
        ["Armamento"] = Vector3.new(789, 99.9, 2260),
        ["Sa√≠da"] = Vector3.new(503, 102.9, 2250)
    }
}

-- Fun√ß√£o para teleportar para local pr√©-definido
local function teleportToPredefined(gameType, locationName)
    -- Verificar se o tipo de jogo √© v√°lido
    if not predefinedLocations[gameType] then
        warn("‚ùå Tipo de jogo '" .. tostring(gameType) .. "' n√£o reconhecido!")
        return false
    end
    
    -- Verificar se o local existe
    if not predefinedLocations[gameType][locationName] then
        warn("‚ùå Local '" .. tostring(locationName) .. "' n√£o encontrado no jogo '" .. gameType .. "'!")
        return false
    end
    
    -- Obter posi√ß√£o pr√©-definida
    local position = predefinedLocations[gameType][locationName]
    
    -- Teleportar
    local success = teleportTo(position)
    
    -- Notificar
    if success and Admin.Config.debugMode then
        print("üöÄ Teleportado para local pr√©-definido: " .. gameType .. " - " .. locationName)
    end
    
    return success
end

-- Fun√ß√£o para listar locais pr√©-definidos para um jogo
local function listPredefinedLocations(gameType)
    if not gameType or not predefinedLocations[gameType] then
        return {}
    end
    
    local locations = {}
    
    for name, _ in pairs(predefinedLocations[gameType]) do
        table.insert(locations, name)
    end
    
    return locations
end

-- Exportar fun√ß√µes do m√≥dulo
local API = {
    to = teleportTo,
    toPlayer = teleportToPlayer,
    back = goBack,
    saveLocation = saveLocation,
    toSaved = teleportToSaved,
    listSaved = listSavedLocations,
    removeLocation = removeLocation,
    toPredefined = teleportToPredefined,
    listPredefined = listPredefinedLocations
}

-- Registrar na API global
Admin.Teleport.locations = API

-- Mensagem de carregamento
print("‚úÖ M√≥dulo de teleporte carregado!")
print("üí° Use Admin.Teleport.locations.toPlayer('nome') para teleportar para um jogador")
print("üí° Use Admin.Teleport.locations.saveLocation('nome') para salvar localiza√ß√£o atual")
print("üí° Use Admin.Teleport.locations.back() para voltar ao local anterior")

-- Retornar API do m√≥dulo
return API